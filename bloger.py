"""–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–ª–æ–≥–µ—Ä–æ–º"""

import traceback
from datetime import datetime, timedelta
from typing import List
from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest


from filters import IsBloger, WaitVideo
from models import Role, Task, Theme, UserCourse, UserRole, Video, User, TASK_STATUS
from common import get_id, get_date_time, error_handler, send_message_admins, send_new_review_request, send_task

router = Router()


@error_handler()
@router.message(F.document, IsBloger(), WaitVideo())
async def upload_file(message: Message):
    await message.answer(
        text='üìπüîúüì®üìπüö´üìÅ.–í–∏–¥–µ–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ, –∞ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª'
    )


@error_handler()
async def get_bloger_user_role(bot: Bot, user: User):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –±–ª–æ–≥–µ—Ä–∞"""
    
    # –ù–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏
    role = Role.get_or_none(name='–ë–ª–æ–≥–µ—Ä')
    if role is None:
        await bot.send_message(
            chat_id=user.tg_id,
            text=(
                "üï¥üîëüö´üîé–†–æ–ª—å –±–ª–æ–≥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! "
                "–≠—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! "
                "C–æ–æ–±—â–∏—Ç–µ –µ–º—É –≤—Å—ë, —á—Ç–æ –í—ã –æ –Ω–µ–º –¥—É–º–∞–µ—Ç–µ. @YuriSilenok"
            )
        )
        return None
    
    # –ù–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = UserRole.get_or_none(
        user=user,
        role=role,
    )

    return user_role


@error_handler()
async def drop_bloger(bot:Bot, user: User):

    user_role = await get_bloger_user_role(bot, user)   
    if user_role is None:
        await bot.send_message(
            chat_id=user.tg_id,
            text='‚úîÔ∏èüëÜüõ†üîëüï¥–í–∞–º –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∞—Å—å —Ä–æ–ª—å –±–ª–æ–≥–µ—Ä–∞.'
        )
        return


    # –ù–∞–ª–∏—á–∏–µ –≤—ã–¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã
    task = Task.get_or_none(
        implementer=user,
        status=0,
    )

    if task:
        await bot.send_message(
            chat_id=user.tg_id,
            text=f'üëÜüí≠üëÜüíö‚òëüëÖ‚ùì–£ –í–∞—Å –≤—ã–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ —Ç–µ–º—É "{task.theme.title}", '
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è?',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text='üëå–î–∞',
                    callback_data=f'del_task_yes_{task.id}',
                )
            ]])
        )
        return


    if user_role:
        user_role.delete_instance()

    await bot.send_message(
        chat_id=user.tg_id,
        text='–†–æ–ª—å –±–ª–æ–≥–µ—Ä–∞ —Å –í–∞—Å —Å–Ω—è—Ç–∞'
    )

    await send_message_admins(
        bot=bot,
        text=f'''<b>–†–æ–ª—å –ë–ª–æ–≥–µ—Ä —Å–Ω—è—Ç–∞</b>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.comment}'''
    )

    await send_task(bot)


@router.message(Command('bloger_off'), IsBloger())
@error_handler()
async def bloger_off(message: Message):

    user = User.get(tg_id=message.from_user.id)
    await drop_bloger(message.bot, user)


@router.callback_query(F.data.startswith('del_task_yes_'), IsBloger())
@error_handler()
async def del_task_yes(query: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –æ—Ç–∫–∞–∑–µ –¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É"""

    await query.message.delete()

    task = Task.get_or_none(
        id=get_id(query.data)
    )

    if task is None:
        await query.message.answer(
            text='–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        )
        return
    
    if task.status != 0:
        await query.message.answer(
            text='–û—Ç –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '
            f'"{TASK_STATUS[task.status]}" –Ω–µ–ª—å–∑—è –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è'
        )
        return

    task.status = -1
    task.save()

    user: User = User.get(tg_id=query.from_user.id)
    user.update_bloger_rating()

    await query.message.answer(
        text=f'–ó–∞–¥–∞—á–∞ c–Ω—è—Ç–∞\n\n{user.get_bloger_report()}'
    )

    await drop_bloger(query.bot, user)


@router.message(F.video, IsBloger(), WaitVideo())
@error_handler()
async def upload_video(message: Message):
    user = User.get(tg_id=message.from_user.id)
    tasks = (Task
        .select()
        .where(
            (Task.status==0) &
            (Task.implementer==user)
        )
    )
    
    if tasks.count() == 0:
        await message.answer(
            text='–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã, —è –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ'
        )
        return
    
    task = tasks.first()
    Video.create(
        task=task,
        file_id=message.video.file_id,
        duration=message.video.duration,
    )
    task.status = 1
    task.save()

    await message.answer(
        text=(
            '–í–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. '
            '–ü–æ–∫–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞ –Ω–µ –≤—ã–¥–∞–Ω–∞, '
            '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –±—ã—Ç—å –±–ª–æ–≥–µ—Ä–æ–º –±–µ–∑ —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.'
        )
    )

    await send_message_admins(
        bot=message.bot,
        text=f'''üï¥üì®üìπ<b>–ë–ª–æ–≥–µ—Ä {user.link} –ø—Ä–∏—Å–ª–∞–ª –≤–∏–¥–µ–æ</b>
–¢–µ–º–∞: {task.theme.course.title}|{task.theme.link}'''
    )

    await send_new_review_request(message.bot)


@router.callback_query(F.data.startswith('task_to_extend_'), IsBloger())
@error_handler()
async def to_extend(callback_query: CallbackQuery):
    task_id = get_id(callback_query.data)
    task: Task = Task.get_by_id(task_id)

    if task.status != 0:
        await callback_query.message.edit_text(
            text='–°—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª—ë–Ω. '
            f'–í–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ {task.theme.link} —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ.',
            parse_mode='HTML',
            reply_markup=None,
        )
        return
    theme: Theme = task.theme
    hours = int(theme.complexity * 72 / 2)
    if hours < 24:
        hours = 24
    
    task.due_date += timedelta(hours=hours)
    task.extension = 0
    task.save()

    await callback_query.message.edit_text(
        text=f'–°—Ä–æ–∫ –í–∞—à–µ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {task.due_date}',
        reply_markup=None,
    )


    await send_message_admins(
        bot=callback_query.bot,
        text=f'''<b>–ë–ª–æ–≥–µ—Ä {task.implementer.link} –ø—Ä–æ–¥–ª–∏–ª —Å—Ä–æ–∫</b>
–¢–µ–º–∞: {task.theme.course.title}|{task.theme.link}
–°—Ä–æ–∫: {task.due_date}'''
    )
    


@error_handler()
async def check_expired_task(bot:Bot):
    dd = get_date_time()
    old_tasks: List[Task] = (
        Task
        .select(Task)
        .where(
            (Task.status==0) &
            (Task.due_date == dd)
        )
    )
    for task in old_tasks:
        try:
            task.status = -2
            task.save()
            
            user_role: UserRole = UserRole.get_or_none(
                user=task.implementer,
                role=IsBloger.role
            )
            if user_role:
                user_role.delete_instance()        
            
            try:
                await bot.send_message(
                    chat_id=task.implementer.tg_id,
                    text='–í—ã –ø—Ä–æ—Å—Ä–æ—á–∏–ª–∏ —Å—Ä–æ–∫ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ. '
                    '–¢–µ–º–∞ –∏ –†–æ–ª—å –±–ª–æ–≥–µ—Ä–∞ —Å –í–∞—Å —Å–Ω—è—Ç–∞. '
                    '–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã –¥–ª—è –≤–∏–¥–µ–æ, '
                    '–ø–æ—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /bloger_on'
                )
            except TelegramBadRequest:
                await send_message_admins(
                    bot=bot,
                    text=traceback.format_exc()
                )

            await send_message_admins(
                bot=bot,
                text=f'–¢–µ–º—É {task.theme.link} –ø—Ä–æ—Å—Ä–æ—á–∏–ª {task.implementer.link}'
            )

            await send_task(bot)

            new_task = Task.get_or_none(
                theme=task.theme,
                status=0,
            )
            if new_task:
                continue

            query: List[UserRole] = (
                UserRole
                .select()
                .where(
                    (UserRole.role_id == IsBloger.role.id) &
                    (~UserRole.user_id << (
                        User
                        .select(User.id)
                        .join(UserCourse)
                        .where(UserCourse.course_id==task.theme.course_id)
                    )) &
                    (~UserRole.user_id<<(
                        Task
                        .select(Task.implementer_id)
                        .where(
                            (Task.status.between(0, 1))
                        )
                    ))
                )
            )
            for user_role in query:
                try:
                    await bot.send_message(
                        chat_id=user_role.user.tg_id,
                        text=f'–î–ª—è –∫—É—Ä—Å–∞ {task.theme.course.title} –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
                        ', –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞—á—É –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ'
                    )
                except TelegramBadRequest:
                    await send_message_admins(
                        bot=bot,
                        text=traceback.format_exc()
                    )
 
        except TelegramBadRequest as ex:
            print(ex, task.implementer.comment)



@error_handler()
async def check_old_task(bot:Bot):
    
    now = get_date_time()

    old_tasks: List[Task] = (
        Task
        .select(Task)
        .where(
            (Task.status == 0) &
            (Task.extension == 0)
        )
    )
    
    
    for task in old_tasks:

        theme: Theme = task.theme
        hours = int(theme.complexity * 72 / 2)
        if hours < 24:
            hours = 24
        reserve_time: timedelta = timedelta(hours=hours)
        left_time: datetime = task.due_date - now
        if left_time > reserve_time:
            continue

        try:
            await bot.send_message(
                chat_id=task.implementer.tg_id,
                text=f'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –í–∞—à–µ–π –∑–∞–¥–∞—á–∏ –¥–æ {task.due_date + reserve_time} ',
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(
                            text=f'–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ {task.due_date + reserve_time}',
                            callback_data=f'task_to_extend_{task.id}'
                        )
                    ]]
                )
            )
            task.extension = 1
            task.save()
        except TelegramBadRequest as ex:
            print(ex, task.implementer.comment)
    

def update_rating_all_blogers():
    blogers: List[User] = (
        User
        .select(User)
        .join(Task)
        .where(
            (Task.status == 0)
        )
    )

    for bloger in blogers:
        bloger.update_bloger_rating()


@error_handler()
async def loop(bot: Bot):
    await check_old_task(bot)
    await check_expired_task(bot)
    update_rating_all_blogers()
