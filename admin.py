import csv
import functools
from typing import List
from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.exceptions import TelegramAPIError
from peewee import fn, JOIN, Case

from common import IsUser, get_due_date
from models import Role, User, UserCourse, UserRole, ReviewRequest, Task, Course, Theme, Video, update_bloger_score_and_rating


router = Router()


class IsAdmin(IsUser):

    role = Role.get(name='–ê–¥–º–∏–Ω')    

    async def __call__(self, message: Message) -> bool:
        is_user = await super().__call__(message)
        if not is_user:
            return False

        user_role = UserRole.get_or_none(
            user=User.get(tg_id=message.from_user.id),
            role=self.role
        )
        if user_role is None:
            await message.answer(
                text='–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∞–¥–º–∏–Ω–∞.'
            )
        return user_role is not None


class UploadVideo(StatesGroup):
    wait_upload = State()


def error_handler():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(message: Message, *args, **kwargs):
            try:
                return await func(message, *args, **kwargs)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ {func.__name__}: {e}")
                error_text = f"üö® <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>\n\nüìå –í —Ö—ç–Ω–¥–ª–µ—Ä–µ `{func.__name__}`\n‚ùó </b>–û—à–∏–±–∫–∞:</b> `{e}`"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                try:
                    await send_message_admins(
                        bot=message.bot,
                        text=error_text
                    )
                except TelegramAPIError:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.")
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω.")
        return wrapper
    return decorator


async def send_task(bot: Bot):

    # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω—è—Ç—ã
    subquery = (
        User
        .select(User.id)
        .join(Task, on=(Task.implementer == User.id))
        .where((Task.status >= 0) & (Task.status <= 1))
    )

    # –¢–µ–º—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞–Ω—ã, –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ, –≥–æ—Ç–æ–≤—ã –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
    subquery2 = (
        Theme
        .select(Theme.id)
        .join(Task)
        .where(Task.status >= 0)
    )

    # –ö—É—Ä—Å—ã –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤–µ–¥—É—Ç—Å—è —Ä–∞–±–æ—Ç—ã
    subquery3 = (
        Course
        .select(Course.id)
        .join(Theme)
        .join(Task)
        .where(
            (Task.status==0) |
            (Task.status==1)
        )
        .group_by(Course)
    )

    query = (
        User
        .select(
            User.id.alias('user_id'),
            Course.id.alias('course_id'),
            fn.MIN(Theme.id).alias('theme_id')
            # Theme.title,
            # Task.implementer,
        )
        .join(UserCourse)
        .join(Course)
        .join(Theme)
        .join(Task, JOIN.LEFT_OUTER, on=(Task.theme_id==Theme.id))
        .where(
            (~(Theme.id << subquery2)) &
            (~(User.id << subquery)) &
            (~(Course.id << subquery3))
        )
        .group_by(User.id, Course.id)
        .order_by(User.bloger_rating.desc(), fn.AVG(Task.score).desc())
    )

    due_date = get_due_date(hours=73)
    user_ids = []
    course_ids = []
    table = query.dicts()
    for row in table:
        user_id = row['user_id']
        course_id = row['course_id']
        theme_id = row['theme_id']
        
        if (user_id in user_ids or 
            course_id in course_ids):
            continue
        user_ids.append(user_id)
        course_ids.append(course_id)

        theme = Theme.get_by_id(theme_id)
        user = User.get_by_id(user_id)

        task = Task.create(
            implementer=user,
            theme=theme,
            due_date=due_date
        )

        await bot.send_message(
            chat_id=user.tg_id,
            text=f'–ö—É—Ä—Å: {theme.course.title}\n'
                f'–¢–µ–º–∞: {theme.title}\n'
                f'url: {theme.url}\n'
                f'–°—Ä–æ–∫: {task.due_date}\n'
                '–ö–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –≤–∏–¥–µ–æ'
        )
        
        await send_message_admins(
                    bot=bot,
                    text=f'''<b>–ë–ª–æ–≥–µ—Ä –ø–æ–ª—É—á–∏–ª —Ç–µ–º—É</b>
–ë–ª–æ–≥–µ—Ä: {task.implementer.comment}
–ö—É—Ä—Å: {theme.course.title}
–¢–µ–º–∞: {theme.title}'''
                )

    if len(table) == 0:
        await send_message_admins(
            bot=bot,
            text='–ù–µ—Ç —Å–≤–æ–±–æ–Ω—ã—Ö —Ç–µ–º –∏–ª–∏ –±–ª–æ–≥–µ—Ä–æ–≤',
        )


def get_admins() -> List[User]:
    return (
        User
        .select(User)
        .join(UserRole)
        .where(UserRole.role==IsAdmin.role)
    )


async def send_message_admins(bot:Bot, text: str):
    for admin in get_admins():
        try:
            await bot.send_message(
                chat_id=admin.tg_id,
                text=text,
                parse_mode='HTML'
            )
        except Exception as ex:
            print(ex)
            await bot.send_message(
                chat_id=admin.tg_id,
                text=text
            )


@router.message(Command('send_task'), IsAdmin())
@error_handler()
async def st(message: Message):
    await send_task(message.bot)


@router.message(Command('report_reviewers'), IsAdmin())
@error_handler()
async def report_reviewers(message: Message):
    reviewers = (
        User
        .select(
            User.comment.alias('fio'),
            User.reviewer_score.alias('score'),
            User.reviewer_rating.alias('rating'),
            fn.COUNT(ReviewRequest).alias('count'),
        )
        .join(UserRole)
        .join(Role)
        .join(ReviewRequest, on=(ReviewRequest.reviewer_id==User.id))
        .where(
            (Role.name == '–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π') &
            (ReviewRequest.status == 1) # –í–∏–¥–µ–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ
        )
        .group_by(User)
        .order_by(User.reviewer_rating)
    )
    result = '–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö\n\n'
    result += '\n'.join([
        f"{i['count']}|{i['score']}|{round(i['rating'], 2)}|{i['fio']}" for i in reviewers.dicts()
    ])

    await message.answer(
        text=result
    )


@router.message(Command('report_blogers'), IsAdmin())
@error_handler()
async def report_blogers(message: Message):
    text = '\n'.join([f'{u.bloger_score} {u.comment}' for u in
        User
        .select(User)
        .join(UserRole)
        .join(Role)
        .where(Role.name=='–ë–ª–æ–≥–µ—Ä')
    ])
    await message.answer(
        text=text
    )


@router.message(Command('add_role'), IsAdmin())
@error_handler()
async def add_role(message: Message):
    
    data = message.text.strip().replace('  ', '').split()
    if len(data) != 3:
        await message.answer(
            text=' –ù–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–∏—á–µ—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ö–æ–º–∞–Ω–¥–∞, —Ä–æ–ª—å, —é–∑–µ—Ä–Ω–µ–π–º'
        )
        return
    role_name = data[2]
    role = Role.get_or_none(name=role_name)
    if role is None:
        await message.answer(
            text=f'–ù–µ—Ç —Ä–æ–ª–∏ {role_name}'
        )
        return
    
    username = data[1].strip()
    user = User.get_or_none(username=username)
    if user is None:
        await message.answer(
            text=f'–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —é–∑–µ—Ä–Ω–µ–π–º {username}'
        )
        return
    UserRole.get_or_create(
        user=user,
        role=role
    )
    await message.answer(
        text='–†–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞'
    )


@router.message(Command('set_comment'), IsAdmin())
@error_handler()
async def set_comment(message: Message):
    
    data = message.text.strip().replace('  ', '').split(maxsplit=1)[1]
    data = data.split(maxsplit=1)
    username = data[0]
    user = User.get_or_none(username=username)
    if user is None:
        await message.answer(
            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω'
        )
        return

    user.comment = data[1]
    user.save()

    await message.answer(
        text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å–∞–Ω'
    )


@router.message(Command('report_themes'), IsAdmin())
@error_handler()
async def report_themes(message: Message):
    
    query = (
        Task
        .select(
            Task.status.alias('status'),
            Theme.title.alias('theme'),
            Course.title.alias('course'),
            User.comment.alias('user'),
            Task.due_date.alias('due_date'),
            Video.id.alias('video'),
            fn.COUNT(Case(None, [(ReviewRequest.status == -1, 1)], None)).alias('overdue_count'),
            fn.COUNT(Case(None, [(ReviewRequest.status == 0, 1)], None)).alias('pending_count'),
            fn.COUNT(Case(None, [(ReviewRequest.status == 1, 1)], None)).alias('reviewed_count'),
        )
        .join(User, on=(Task.implementer == User.id))
        .join(Theme, on=(Task.theme == Theme.id))
        .join(Course, on=(Course.id==Theme.course))
        .join(Video, JOIN.LEFT_OUTER, on=(Task.id == Video.task))
        .join(ReviewRequest, JOIN.LEFT_OUTER, on=(ReviewRequest.video == Video.id))
        .where(Task.status.between(0, 1))
        .group_by(Task.id)
        .order_by(Task.status, Task.due_date)
    )
    points = []
    for row in query.dicts():
        point = []
        line = [
            str(row["status"]),
            str(row["due_date"]),
        ]
        if row['status'] == 1:
            line.extend([
                str(row["overdue_count"]),
                str(row["pending_count"]),
                str(row["reviewed_count"]),
            ])
        point.append('|'.join(line))
        point.append(
            '|'.join([
                row["course"],
                row["theme"],
            ])
        )
        point.append(
            ': '.join([
                '–ë–ª–æ–≥–µ—Ä',
                row["user"].split(maxsplit=1)[0],
            ])
        )

        if row['overdue_count'] > 0:
            line = ['<b>–ü—Ä–æ—Å—Ä–æ—á–∏–ª–∏:</b>']

            query2: List[ReviewRequest] = (
                ReviewRequest
                .select(ReviewRequest)
                .where(
                    (ReviewRequest.video==row['video']) &
                    (ReviewRequest.status==-1)
                )
            )

            for rr in query2:
                line.append(
                    '|'.join([
                        (rr.reviewer.comment.split(maxsplit=1)[0] if rr.reviewer.comment else '–Ω–µ—Ç –§–ò–û'),
                        str(rr.due_date),
                        str(round(rr.reviewer.reviewer_rating, 2)),
                    ])
                )
            
            point.append(
                '\n'.join(line)
            )

        if row['pending_count'] > 0:
            line = ['<b>–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:</b>']

            query2: List[ReviewRequest] = (
                ReviewRequest
                .select(ReviewRequest)
                .where(
                    (ReviewRequest.video==row['video']) &
                    (ReviewRequest.status==0)
                )
            )

            for rr in query2:
                line.append(
                    '|'.join([
                        (rr.reviewer.comment.split(maxsplit=1)[0] if rr.reviewer.comment else '–Ω–µ—Ç –§–ò–û'),
                        str(rr.due_date),
                        str(round(rr.reviewer.reviewer_rating, 2)),
                    ])
                )
            
            point.append(
                '\n'.join(line)
            )

        if row['reviewed_count'] > 0:
            line = ['<b>–ü—Ä–æ–≤–µ—Ä–∏–ª–∏:</b>']

            query2: List[ReviewRequest] = (
                ReviewRequest
                .select(ReviewRequest)
                .where(
                    (ReviewRequest.video==row['video']) &
                    (ReviewRequest.status==1)
                )
            )

            for rr in query2:
                line.append(
                    '|'.join([
                        (rr.reviewer.comment.split(maxsplit=1)[0] if rr.reviewer.comment else '–Ω–µ—Ç –§–ò–û'),
                        str(rr.due_date),
                        str(round(rr.reviewer.reviewer_rating, 2)),
                    ])
                )
            
            point.append(
                '\n'.join(line)
            )
        
        points.append('\n'.join(point))

    await message.answer(
        text='\n\n'.join(points),
        parse_mode='HTML',
    )


@router.message(F.document.file_name.endswith(".csv"), IsAdmin())
@error_handler()
async def add_course(message: Message, state: FSMContext):
    doc = message.document
    course_title = doc.file_name[:-4]
    course, _ = Course.get_or_create(
        title=course_title
    )

    file = await message.bot.download(doc.file_id)
    try:
        file.seek(0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        table = csv.reader(file.read().decode("utf-8").splitlines())  # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        
        load_videos = []
        for row in table:
            theme_title = row[0]
            theme_url = row[1]
            theme, _ = Theme.get_or_create(
                course=course,
                title=theme_title,
                url=theme_url
            )
            if len(row) > 2 and row[2] != '':
                load_videos.append({
                    'theme': theme.id,
                    'title': theme.title,
                    'implementer': row[2].replace('@', ''),
                    'score': float(row[3].replace(',', '.')) if len(row) > 3 and row[3] != '' else 0.0,
                    'status': 2 if len(row) > 3 and row[3] != '' else 1,
                })

        if len(load_videos) == 0:
            await message.answer(
                text='–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
            )
            return
        
        await state.set_data({
            'load_videos': load_videos
        })
        await state.set_state(UploadVideo.wait_upload)
        await message.answer(
            text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{load_videos[0]["title"]}"'
        )
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {e}")


@router.message(F.video, IsAdmin(), UploadVideo.wait_upload)
@error_handler()
async def upload_video(message: Message, state: FSMContext):

    data = await state.get_data()
    load_videos = data['load_videos']
    if len(load_videos) == 0:
        await message.answer(
            text='–í—Å–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
        )
        return
    
    load_video = load_videos.pop(0)
    implementer = User.get(username=load_video['implementer'])
    theme = Theme.get(id=load_video['theme'])
    status=load_video['status']
    score=load_video['score']
    task, _ = Task.get_or_create(
        implementer=implementer,
        theme=theme,
        status=status,
        score=score,
        due_date=get_due_date(0)
    )

    Video.get_or_create(
        task=task,
        file_id=message.video.file_id,
        duration=message.video.duration,
    )

    text = update_bloger_score_and_rating(implementer)
    await message.bot.send_message(
        chat_id=implementer.tg_id,
        text=f'–í–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É {theme.title} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n{text}'
    )

    if len(load_videos) == 0:
        await state.clear()
        await message.answer(
            text='–í—Å–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
        )
        return

    await state.set_data({
        'load_videos': load_videos
    })

    await message.answer(
        text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{load_videos[0]["title"]}"'
    )