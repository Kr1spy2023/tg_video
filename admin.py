import csv
from typing import List
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from peewee import fn, JOIN, Case

from filters import IsAdmin
from common import add_reviewer, get_date_time, error_handler, get_id, send_task
from models import *


router = Router()



class UploadVideo(StatesGroup):
    wait_upload = State()


@router.callback_query(F.data.startswith('del_rr_'))
@error_handler()
async def del_rr(callback: CallbackQuery):

    rr_id = get_id(callback.data)
    rr: ReviewRequest = ReviewRequest.get_or_none(
        id=rr_id
    )
    
    if not rr:
        await callback.answer(
            text='–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω'
        )
        return

    r: Review = rr.reviews.first()
    if not r:
        await callback.answer(
            text='–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∑—ã–≤'
        )
        return
    video: Video = rr.video
    task: Task = video.task
    if task.status != 1:
        task.status = 1
        task.save()
        await callback.message.reply(
            text='–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        )
     
    await callback.message.reply(
        text=f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω'
    )

    await callback.bot.send_message(
        chat_id=rr.reviewer.tg_id,
        text='–í–∞—à –æ—Ç–∑—ã–≤ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω. '
        '–û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. '
        '–í–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –≤—ã–¥–∞—Å—Ç –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n\n'
        f'{r.comment}'
    )

    await callback.bot.send_message(
        chat_id=task.implementer.tg_id,
        text=f'–û—Ç–∑—ã–≤ –ø–æ –≤–∞—à–µ–º—É –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω.\n\n{r.comment}'
    )

    rr.delete_instance()
    await add_reviewer(callback.bot, video.id)


@router.message(Command('send_task'), IsAdmin())
@error_handler()
async def st(message: Message):
    await send_task(message.bot)


@router.message(Command('report_reviewers'), IsAdmin())
@error_handler()
async def report_reviewers(message: Message):
    old_date = get_date_time(hours=-24*14)
    reviewers: List[User] = (
        User
        .select(User)
        .where(
            (User.reviewer_score > 0) &
            (User.id << (
                ReviewRequest
                .select(ReviewRequest.reviewer)
                .join(Review)
                .where(Review.at_created >= old_date)
            ))
        )
        .group_by(User)
        .order_by(User.reviewer_rating)
    )
    result = 'üî¨üìÑ–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö\n\n'
    result += '\n'.join([
        f"{u.reviewer_score:05.2f}|{u.reviewer_rating:05.3f}|{u.link}" for u in reviewers
    ])

    await message.answer(
        text=result,
        parse_mode='HTML',
        disable_web_page_preview=True,
    )


@router.message(Command('report_blogers'), IsAdmin())
@error_handler()
async def report_blogers(message: Message):
    points = ['<b>üï¥üìÑ–û—Ç—á–µ—Ç –æ –±–ª–æ–≥–µ—Ä–∞—Ö</b>']
    old_date = get_date_time(hours=-24*14)
    blogers = (
        User
        .select(User)
        .where(
            (User.bloger_score > 0) &
            (User.id << (
                Task
                .select(Task.implementer)
                .join(Video)
                .where(Video.at_created >= old_date)
            ))
        )
        .order_by(User.bloger_rating.desc())
    )
    for bloger in blogers:
        
        points.append(
            f'{bloger.bloger_score:05.2f}'
            f'|{(bloger.bloger_rating*100):05.2f}'
            f'|{bloger.link}'
        )


    text = '\n'.join(points)
    await message.answer(
        text=text,
        parse_mode='HTML',
        disable_web_page_preview=True,
    )


@router.message(Command('add_role'), IsAdmin())
@error_handler()
async def add_role(message: Message):
    
    data = message.text.strip().replace('  ', '').split()
    if len(data) != 3:
        await message.answer(
            text=' ‚ùåüî¢üî¢–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ö–æ–º–∞–Ω–¥–∞, —Ä–æ–ª—å, —é–∑–µ—Ä–Ω–µ–π–º'
        )
        return
    role_name = data[2]
    role = Role.get_or_none(name=role_name)
    if role is None:
        await message.answer(
            text=f'üì§üôÖ‚Äç‚ôÇüîë–ù–µ—Ç —Ä–æ–ª–∏ {role_name}'
        )
        return
    
    username = data[1].replace('@', '').strip()
    user = User.get_or_none(username=username)
    if user is None:
        await message.answer(
            text=f'üì§üôÖ‚Äç‚ôÇüë©‚Äçüíª‚èÆüÜî–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —é–∑–µ—Ä–Ω–µ–π–º {username}'
        )
        return
    UserRole.get_or_create(
        user=user,
        role=role
    )
    await message.answer(
        text='üîëüöÆ–†–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞'
    )


@router.message(Command('set_comment'), IsAdmin())
@error_handler()
async def set_comment(message: Message):
    
    data = message.text.strip().replace('  ', '').split(maxsplit=1)[1]
    data = data.split(maxsplit=1)
    username = data[0].replace('@','').strip()
    user = User.get_or_none(username=username)
    if user is None:
        await message.answer(
            text='üë©‚Äçüíª‚èÆüëâüÜîüö´üîé–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω'
        )
        return

    user.comment = data[1]
    user.save()

    await message.answer(
        text='üè§‚è∫–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å–∞–Ω'
    )


RR_STATUS = {
    -1: '‚ùå',
    0: '‚ö°' ,
    1: '‚úÖ',
}

TASK_STATUS = {
    0: 'üìπ',
    1: 'üëÄ',
    2: '‚è±Ô∏è'
}


@router.message(Command('report_themes'), IsAdmin())
@error_handler()
async def report_themes(message: Message):
    
    tasks: List[Task] = (
        Task
        .select(Task)
        .where(Task.status.between(0,2))
        .join(User, on=(User.id==Task.implementer))
        .order_by(
            Task.status.desc(),
            User.bloger_rating.desc(),
        )
    )

    points = [[], [], []]

    for task in tasks:
        implementer: User = task.implementer
        point = ['|'.join([
            TASK_STATUS[task.status],
            f'{task.theme.complexity:5.3f}',
            task.theme.course.title,
            task.theme.title,
            # (
            #     task.due_date if task.status == 0 
            #     else task.videos.first().at_created
            # ).strftime("%Y-%m-%d %H:%M"),
            (
                f'{task.due_date.strftime("%d %H:%M")}' if task.status == 0 else
                '' if task.status == 1 
                else f'{(task.score*100):05.2f}'
            ),
            implementer.link,
            f'{(implementer.bloger_rating*100):05.2f}'
        ])]
        if task.status > 0:
            rrs = (
                task
                .videos
                .first()
                .reviewrequests
                .join(Review, JOIN.LEFT_OUTER)
                .order_by(
                    ReviewRequest.status.desc(),
                    Case(
                        None,
                        [(ReviewRequest.status==0, ReviewRequest.due_date)],
                        Review.at_created
                    )
                )
            )

            line = ''.join([
                (
                    f'<a href="https://t.me/{rr.reviewer.username}">{RR_STATUS[rr.status]}</a>{rr.reviews.first().score:3.1f}'
                    if rr.status == 1 else
                    f'<a href="https://t.me/{rr.reviewer.username}">{RR_STATUS[rr.status]}</a>{rr.due_date.strftime("%d %H:%M")}'
                    if rr.status == 0 else
                    f'<a href="https://t.me/{rr.reviewer.username}">{RR_STATUS[rr.status]}</a>'
                ) for rr in rrs
            ])
    
            if line:
                point.append(line)
    
        points[task.status].append(
            '\n'.join(point)
        )


    end_points = []
    char_count = 0
    for status in (1,0,2):
        for point in points[status]:
            if len(point) + char_count < 4096:
                end_points.append(point)
                char_count += len(point)


    await message.answer(
        text='\n\n'.join(end_points),
        parse_mode='HTML',
        disable_web_page_preview=True,
    )


@router.message(F.document.file_name.endswith(".csv"), IsAdmin())
@error_handler()
async def add_course(message: Message, state: FSMContext):

    file = await message.bot.download(message.document.file_id)
    try:
        file.seek(0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        table = csv.reader(file.read().decode("utf-8").splitlines())  # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        
        load_videos = []
        for row in table:
            course_title = row[0]
            if not course_title:
                break

            course, _ = Course.get_or_create(
                title=course_title
            )
            theme_title = row[1]
            theme_url = row[2]
            theme, _ = Theme.get_or_create(
                course=course,
                title=theme_title,
                url=theme_url
            )

            theme_complexity = float(row[3].replace(',', '.'))
            if theme.complexity != theme_complexity:
                theme.complexity = theme_complexity
                theme.save()

            if len(row) > 4 and row[4] != '':
                score = 0.0
                status = 1

                if len(row) > 5 and row[5] != '':
                    score = float(row[5].replace(',', '.'))
                    if score  >= 0.8:
                        status = 2
                    else:
                        status = -2

                load_videos.append({
                    'theme': theme.id,
                    'title': theme.title,
                    'implementer': row[4].replace('@', ''),
                    'score': score,
                    'status': status,
                })

        if len(load_videos) == 0:
            await message.answer(
                text='‚ÜóÔ∏è‚ùîüìê–¢–µ–º—ã –∫—É—Ä—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
            )
            for user in User.select():
                update_bloger_score_and_rating(user)

        else:            
            await state.set_data({
                'load_videos': load_videos
            })
            await state.set_state(UploadVideo.wait_upload)
            await message.answer(
                text=f'üì®üìπ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{load_videos[0]["title"]}"'
            )
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {e}")


@router.message(F.video, IsAdmin(), UploadVideo.wait_upload)
@error_handler()
async def upload_video(message: Message, state: FSMContext):

    data = await state.get_data()
    load_videos = data['load_videos']
    if len(load_videos) == 0:
        await message.answer(
            text='üåêüìπ‚úîÔ∏èüìÇ–í—Å–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
        )
        return
    
    load_video = load_videos.pop(0)
    implementer = User.get(username=load_video['implementer'])
    theme = Theme.get(id=load_video['theme'])
    status=load_video['status']
    score=load_video['score']
    task, _ = Task.get_or_create(
        implementer=implementer,
        theme=theme,
        status=status,
        score=score,
        due_date=get_date_time(0)
    )

    Video.get_or_create(
        task=task,
        file_id=message.video.file_id,
        duration=message.video.duration,
    )

    text = update_bloger_score_and_rating(implementer)
    await message.bot.send_message(
        chat_id=implementer.tg_id,
        text=f'üìπüìÇüë®‚Äçüíº–í–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É {theme.title} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n{text}'
    )

    if len(load_videos) == 0:
        await state.clear()
        await message.answer(
            text='üåêüìπ‚úîÔ∏èüìÇ–í—Å–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
        )
        return

    await state.set_data({
        'load_videos': load_videos
    })

    await message.answer(
        text=f'üì®üìπ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{load_videos[0]["title"]}"'
    )
