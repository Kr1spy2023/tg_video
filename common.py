from datetime import datetime, timedelta
import functools
import traceback
from typing import List
from aiogram import Bot, Router
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest

from peewee import fn, Case, JOIN

from models import *


router = Router()

@router.message()
async def other_message(message: Message):
    await message.answer(
        text='–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    )

@router.callback_query()
async def other_callback(callback: CallbackQuery):
    await callback.message.answer(
        text='–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    )

def get_id(text):
    return int(text[(text.rfind('_')+1):])

async def get_user(bot: Bot, tg_id: int) -> User:
    user = User.get_or_none(tg_id=tg_id)
    if user is None:
        await bot.send_message(
            chat_id=tg_id,
            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
        )
    return user

def get_date_time(hours:int=0):
    due_date = datetime.now()
    due_date = datetime(
        year=due_date.year,
        month=due_date.month,
        day=due_date.day,
        hour=due_date.hour,
    )
    due_date += timedelta(
        hours=hours
    )
    return due_date



def error_handler():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                traceback.print_exc()
                if len(args) == 0:
                    return None
                bot: Bot = None
                message: Message = None
                if isinstance(args[0], Message) or isinstance(args[0], CallbackQuery):
                    bot = args[0].bot
                    message = args[0]
                elif isinstance(args[0], Bot):
                    bot = args[0]
                
                if bot is None:
                    return None
                 
                error_text = (f'üö®{traceback.format_exc()}')
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                try:
                    await send_message_admins(
                        bot=bot,
                        text=error_text
                    )
                except TelegramAPIError:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.")
                
                if message:
                    await message.answer(
                        text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω."
                    )
        return wrapper
    return decorator


@error_handler()
async def send_task(bot: Bot):
    # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω—è—Ç—ã
    subquery = (
        User
        .select(User.id)
        .join(Task, on=(Task.implementer == User.id))
        .where(Task.status.between(0, 1))
    )

    # –¢–µ–º—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞–Ω—ã, –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ, –≥–æ—Ç–æ–≤—ã –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
    subquery2 = (
        Theme
        .select(Theme.id)
        .join(Task)
        .where(Task.status >= 0)
    )

    # –ü–æ–¥—Å—Ç—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–∫–æ —É –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –∫—É—Ä—Å—É
    subquery3 = (
        Task
        .select(
            Task.implementer.alias('user_id'),
            Theme.course.alias('course_id'),
            fn.AVG(Task.score).alias('score'),
        )
        .join(Theme)
        .group_by(Task.implementer, Theme.course)
    )

    subquery4 = (
        Theme
        .select(Theme.course)
        .join(Task)
        .where(Task.status.between(0, 1))
        .group_by(Theme.course)
    )

    bloger_role = Role.get(name='–ë–ª–æ–≥–µ—Ä')

    query = (
        User
        .select(
            User.id.alias('user_id'),
            Course.id.alias('course_id'),
            fn.MIN(Theme.id).alias('theme_id')
        )
        .join(UserRole, on=(User.id==UserRole.user))
        .join(UserCourse, on=(User.id==UserCourse.user))
        .join(Course, on=(Course.id==UserCourse.course))
        .join(Theme, on=(Theme.course==Course.id))
        .join(
            subquery3,
            JOIN.LEFT_OUTER,
            on=( # ucs.user_id=user.id and ucs.course_id=course.id
                (subquery3.c.user_id==User.id) &
                (subquery3.c.course_id==Course.id)
            )
        )
        .where(
            (~(Theme.id << subquery2)) &
            (~(User.id << subquery)) &
            (~(Course.id << subquery4)) &
            (UserRole.role==bloger_role)
        )
        .group_by(User.id, Course.id)
        .order_by(
            User.bloger_rating.desc(),
            # CASE WHEN (AVG(ucs.score) IS NULL) THEN user.bloger_rating ELSE AVG(ucs.score) END DESC
            Case(None, [(fn.AVG(subquery3.c.score).is_null(), User.bloger_rating)], fn.AVG(subquery3.c.score)).desc()
        )
    )

    user_ids = []
    course_ids = []
    table = query.dicts()

    for row in table:

        user_id = row['user_id']
        course_id = row['course_id']
        theme_id = row['theme_id']
        
        if (user_id in user_ids or 
            course_id in course_ids):
            continue

        user_ids.append(user_id)
        course_ids.append(course_id)

        theme: Theme = Theme.get_by_id(theme_id)
        user = User.get_by_id(user_id)

        hours = int(theme.complexity*72+1)
        if hours < 72:
            hours = 72

        task = Task.create(
            implementer=user,
            theme=theme,
            due_date=get_date_time(hours=hours)
        )

        try:
            await bot.send_message(
                chat_id=user.tg_id,
                text=f'–ö—É—Ä—Å: {theme.course.title}\n'
                    f'–¢–µ–º–∞: <a href="{theme.url}">{theme.title}</a>\n'
                    f'–°—Ä–æ–∫: {task.due_date}\n'
                    '–ö–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –≤–∏–¥–µ–æ',
                parse_mode='HTML'
            )
        except TelegramBadRequest as ex:
            await send_message_admins(
                bot=bot,
                text=str(ex)
            )
        
        await send_message_admins(
            bot=bot,
            text=f'''<b>–ë–ª–æ–≥–µ—Ä –ø–æ–ª—É—á–∏–ª —Ç–µ–º—É</b>
–ë–ª–æ–≥–µ—Ä: {task.implementer.comment}
–ö—É—Ä—Å: {theme.course.title}
–¢–µ–º–∞: <a href="{theme.url}">{theme.title}</a>
'''
                )


@error_handler()
async def send_message_admins(bot:Bot, text: str, reply_markup = None):
    for admin in get_admins():
        try:
            await bot.send_message(
                chat_id=admin.tg_id,
                text=text,
                parse_mode='HTML',
                disable_web_page_preview=True,
                reply_markup=reply_markup,
            )
        except Exception as ex:
            print(ex)
            await bot.send_message(
                chat_id=admin.tg_id,
                text=text,
                reply_markup=reply_markup,
            )


def get_admins() -> List[User]:
    return (
        User
        .select(User)
        .join(UserRole)
        .where(UserRole.role==Role.get(name='–ê–¥–º–∏–Ω').id)
    )


@error_handler()
async def send_new_review_request(bot: Bot):
    """–í—ã–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"""
    # –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ —É –∫–æ—Ç—ã—Ö –µ—Å—Ç—å –∑–∞–¥–∞—á–∏
    reviewer_ids = [u.id for u in
        User
        .select(User)
        .join(ReviewRequest, on=(ReviewRequest.reviewer_id==User.id))
        .where(ReviewRequest.status==0)
        
    ]
    reviewer_ids_len = len(reviewer_ids)
    task_count_status_1 = (
        Task
        .select(fn.COUNT(Task.id))
        .where(Task.status == 1)
        .scalar()
    )
    if reviewer_ids_len < 5 or reviewer_ids_len < task_count_status_1:
        # –≤–∏–¥–µ–æ —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö
        video_ids = [v.id for v in 
            Video
            .select(Video)
            .join(ReviewRequest, JOIN.LEFT_OUTER, on=(ReviewRequest.video==Video.id))
            .join(Task, on=(Task.id==Video.task))
            .join(User, on=(User.id==Task.implementer))
            .where(
                (Task.status == 1) &
                ((ReviewRequest.status >= 0) |
                (ReviewRequest.status.is_null()))
            )
            .group_by(Video.id)
            .order_by(User.bloger_rating.desc())
            .having(fn.COUNT(Video.id) < 5)
        ]
        for video_id in video_ids:
            await add_reviewer(bot, Video.get_by_id(video_id))
            await send_new_review_request(bot)
            break



@error_handler()
async def add_reviewer(bot: Bot, video_id: int):
    # –°–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ
    vacant_reviewer_ids: List[int] = get_vacant_reviewer_ids()
    
    video: Video = Video.get_by_id(video_id)
    task: Task = video.task
    theme: Theme = task.theme
    
    if task.implementer_id in vacant_reviewer_ids:
        vacant_reviewer_ids.remove(task.implementer_id)
    
    if len(vacant_reviewer_ids) == 0:
        await send_message_admins(
            bot=bot,
            text=f'''<b>–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å c–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ</b>
–ö—É—Ä—Å: {theme.course.title}
–¢–µ–º–∞: {theme.title}'''
        )
        return
    else:
        # —Ç–µ –∫—Ç–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ –≤–∏–¥–µ–æ
        reviewer_ids = [ rr.reviewer_id for rr in
            ReviewRequest
            .select(ReviewRequest.reviewer)
            .where(ReviewRequest.video_id==video_id)
            .group_by(ReviewRequest.reviewer)
        ]

        candidat_reviewer_ids = [i for i in vacant_reviewer_ids if i not in reviewer_ids]
        if len(candidat_reviewer_ids) == 0:
            # –≤—Å–µ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ
            all_reviewer_ids = get_reviewer_ids()
            # –∑–∞–Ω—è—Ç—ã–µ –Ω–∞–¥ –¥—Ä—É–≥–∏—Ö –≤–∏–¥–µ–æ
            other_job_reviews = ', '.join([f'@{u.username}' for u in
                User
                .select(User)
                .where(
                    User.id.in_([i for i in all_reviewer_ids if i not in reviewer_ids])
                )
            ])
            

            theme = Video.get_by_id(video_id).task.theme
            await send_message_admins(
                bot=bot,
                text=f'''<b>–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å—Ä–µ–¥–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö</b>
–ö—É—Ä—Å: {theme.course.title}
–¢–µ–º–∞: {theme.title}
–ü–Ω—É—Ç—å –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö: {other_job_reviews}
'''
            )

            return

        due_date = get_date_time(hours=25)
        review_request = ReviewRequest.create(
            reviewer_id=candidat_reviewer_ids[0],
            video_id=video_id,
            due_date=due_date
        )
        await send_video(bot, review_request)


@error_handler()
async def send_video(bot: Bot, review_request: ReviewRequest):
    
    text = f'–í–∞—à–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{review_request.video.task.theme.link}" –≤—ã–¥–∞–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
    try:
        await bot.send_message(
            chat_id=review_request.video.task.implementer.tg_id,
            text=text,
            parse_mode='HTML',
            disable_web_page_preview=True,
        )
    except TelegramBadRequest as ex:
        print(ex, text)

    caption = (
        f'–≠—Ç–æ –≤–∏–¥–µ–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ {review_request.due_date}.\n'
        f'–¢–µ–º–∞: "{review_request.video.task.theme.course.title}|{review_request.video.task.theme.link}"\n'
        '–î–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–∏–¥–µ–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '
        '–≤ –Ω–∞—á–∞–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ü–µ–Ω–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [0.0; 5.0], –∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –æ—Ç–∑—ã–≤ –æ –≤–∏–¥–µ–æ'
    )
    try:
        await bot.send_video(
            chat_id=review_request.reviewer.tg_id,
            video=review_request.video.file_id,
            caption=caption,
            parse_mode='HTML',
        )
    except TelegramBadRequest as ex:
        print(ex, caption, sep='\n')

    await send_message_admins(
        bot=bot,
        text=f'''<b>–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π –ø–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ</b>
–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: {review_request.reviewer.comment}
–ë–ª–æ–≥–µ—Ä: {review_request.video.task.implementer.comment}
–ö—É—Ä—Å: {review_request.video.task.theme.course.title}
–¢–µ–º–∞: {review_request.video.task.theme.title}'''
    )



def update_task_score(task: Task):

    task_score = sum([review.score for review in 
        Review
        .select(Review)
        .join(ReviewRequest)
        .join(Video)
        .join(Task)
        .where(Task.id==task.id)
    ]) / 25

    task.score = task_score
    task.status = 2 if task_score >= 0.8 else -2
    task.save()


def get_vacant_reviewer_ids() -> List[User]:
    reviewer_ids = get_reviewer_ids()
    # –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    jobs_ids = [ u.id for u in
        User
        .select(User)
        .join(ReviewRequest)
        .where(
            (ReviewRequest.status==0)
        )
        .group_by(ReviewRequest.reviewer)
        .order_by(User.reviewer_rating)
    ]
    return [i for i in reviewer_ids if i not in jobs_ids]


def get_reviewer_ids() -> List[User]:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π"""
    return [ u.id for u in
        User
        .select(User)
        .join(UserRole)
        .join(Role)
        .where(Role.name=='–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π')
        .order_by(User.reviewer_rating)
    ]

