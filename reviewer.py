from datetime import datetime, timedelta
from typing import List
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from peewee import fn, JOIN


from filters import IsReview
from models import *
from common import *

router = Router()


@router.message(F.text, IsReview())
@error_handler()
async def get_review(message:Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏ –æ—Ç–∑—ã–≤–∞"""

    """–ü–æ–∏—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"""
    reviewer: User = User.get(tg_id=message.from_user.id)
    review_request: ReviewRequest = ReviewRequest.get_or_none(
        reviewer=reviewer,
        status=0 # –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
    )

    if review_request is None:
        await message.answer(
            text='–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω'
        )
        return

    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏"""
    text = message.text.strip()
    digit = text.find(' ')
    digit = text[:digit] if digit >= 0 else text
    digit = digit.replace(',', '.')
    
    try:
        digit = float(digit)
    except ValueError:
        await message.answer(
            text=f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å {digit} –≤ —á–∏—Å–ª–æ'
        )
        return
    
    if digit < 0 or digit > 5:
        await message.answer(
            text=f'{digit} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [0.0; 5.0]'
        )
        return
    
    """–§–∏–∫—Å–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞"""
    Review.create(
        review_request=review_request,
        score=digit,
        comment=text,
    )
    review_request.status = 1 # –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ
    review_request.save()
    
    reviewer.update_reviewer_score()
    reviewer.update_reviewer_rating()
    await message.answer(
        text=f"–°–ø–∞—Å–∏–±–æ, –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω.\n\n{reviewer.get_reviewer_report()}",
        parse_mode='HTML',
        disable_web_page_preview=True,
    )
    
    implementer: User = review_request.video.task.implementer
    await message.bot.send_message(
        chat_id=implementer.tg_id,
        text=f'–í–∞—à–µ –≤–∏–¥–µ–æ –æ—Ü–µ–Ω–∏–ª–∏\n\n{text}',
    )

    await send_message_admins(
        bot=message.bot,

        text=f'–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π {reviewer.link} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∑—ã–≤ '
        f'–Ω–∞ –≤–∏–¥–µ–æ {review_request.video.task.theme.course.title}|{review_request.video.task.theme.link} '
        f'–±–ª–æ–≥–µ—Ä–∞ {review_request.video.task.implementer.link}\n\n'
        f'{text}',

        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text='–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –∑–∞–ø—Ä–æ—Å',
                callback_data=f'del_rr_{review_request.id}'
            )
        ]])
    )


    """–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏"""    
    reviews = (
        Review
        .select(Review)
        .join(ReviewRequest)
        .where(
            (ReviewRequest.video==review_request.video) &
            (ReviewRequest.status==1)))
    
    if reviews.count() < 5:
        await send_new_review_request(message.bot)
        return

    task: Task = update_task_score(review_request.video.task)

    implementer.update_bloger_score()
    implementer.update_bloger_rating()

    await send_new_review_request(message.bot)

    text=f'–ó–∞–∫–æ–Ω—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –í–∞—à–µ–≥–æ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ {task.theme.link}.\n'

    if task.status == 2:
        text += '–û–Ω–æ ‚ù§Ô∏è–¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ‚ù§Ô∏è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.'
    elif task.status == -2:
        text += '–û–Ω–æ üí©–Ω–∏–∑–∫–æ–≥–æüí© –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫—É.'
    text += f'\n\n{implementer.get_bloger_report()}'

    await message.bot.send_message(
        chat_id=task.implementer.tg_id,
        text=text,
        parse_mode='HTML',
        disable_web_page_preview=True,
    )

    await send_message_admins(
        bot=message.bot,
        text=f'''<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>
{task.implementer.link}|{task.theme.link}|{task.score}|{TASK_STATUS[task.status]}'''
    )

    await send_task(message.bot)

    if (
        implementer.bloger_rating >= get_limit_score() and
        Task.select().where(Task.implementer==implementer.id).count() >= 10 and
        UserRole.select().where((UserRole.user==implementer.id)&(UserRole.role==IsReviewer.role.id)).count() == 0
    ):
        UserRole.get_or_create(
            user=implementer,
            role=IsReviewer.role,
        )
        await message.bot.send_message(
            chat_id=implementer.tg_id,
            text='–í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ. '
            '–û–∂–∏–¥–∞–π—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. '
            '–ï—Å–ª–∏ –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∏–¥–µ–æ, '
            '–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∏–¥–µ–æ.'
        )

        await send_message_admins(
            bot=message.bot,
            text=f'–†–æ–ª—å –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ –≤—ã–¥–∞–Ω–∞ {implementer.link}'
        )



@error_handler()
async def get_reviewer_user_role(bot: Bot, user: User):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –±–ª–æ–≥–µ—Ä–∞"""
    
    # –ù–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏
    role = Role.get_or_none(name='–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π')
    if role is None:
        await bot.send_message(
            chat_id=user.tg_id,
            text=(
                "–†–æ–ª—å –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! "
                "–≠—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! "
                "C–æ–æ–±—â–∏—Ç–µ –µ–º—É –≤—Å—ë, —á—Ç–æ –í—ã –æ –Ω–µ–º –¥—É–º–∞–µ—Ç–µ. @YuriSilenok"
            )
        )
        return None
    
    # –ù–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = UserRole.get_or_none(
        user=user,
        role=role,
    )
    if user_role is None:
        await bot.send_message(
            chat_id=user.tg_id,
            text='–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–º!'
        )
        return None

    return user_role


def get_reviewe_requests_by_notify() -> List[ReviewRequest]:
    '''–ü–û–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —É –∫–æ—Ç–æ—Ä—ã –ø–æ–¥—Ö–æ–¥–∏—Ç —Å—Ä–æ–∫'''
    due_date = get_date_time(hours=1)
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä–∫—É –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫
    return (
        ReviewRequest
        .select()
        .where(
            (ReviewRequest.due_date == due_date) &
            (ReviewRequest.status == 0)
        )
    )


def get_old_reviewe_requests() -> List[ReviewRequest]:
    '''–ü–û–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —É –∫–æ—Ç–æ—Ä—ã –ø—Ä–æ—à–µ–ª —Å—Ä–æ–∫'''
    now = datetime.now()
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä–∫—É –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫
    return (
        ReviewRequest
        .select()
        .where(
            (ReviewRequest.due_date <= now) &
            (ReviewRequest.status == 0)
        )
    )


@error_handler()
async def check_old_reviewer_requests(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"""
    
    
    rrs: List[ReviewRequest] = get_old_reviewe_requests()

    for rr in rrs:
        rr.status = -1
        rr.save()
        reviewer: User = rr.reviewer
        task: Task = rr.video.task
        reviewer.update_reviewer_rating()
        
        
        text = (
            '–ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å –í–∞—Å —Å–Ω—è—Ç–∞, '
            f'–æ–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.\n\n{reviewer.get_reviewer_report()}'
        )
        try:
            await bot.send_message(
                chat_id=reviewer.tg_id,
                text=text,
                parse_mode='HTML',
                disable_web_page_preview=True,
            )
        except TelegramBadRequest as ex:
            print(ex, text)
        
        await send_message_admins(
            bot=bot,
            text=(
                f'–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π {reviewer.link} –ø—Ä–æ—Å—Ä–æ—á–∏–ª '
                f'—Ç–µ–º—É {task.theme.link} '
                f'–±–ª–æ–≥–µ—Ä–∞ {task.implementer.link}'
            )
        )

        await send_new_review_request(bot)


@router.callback_query(F.data.startswith('rr_to_extend_'), IsReview())
@error_handler()
async def to_extend(callback_query: CallbackQuery):
    rr_id = get_id(callback_query.data)
    rr: ReviewRequest = ReviewRequest.get_by_id(rr_id)

    if rr.status != 0:
        await callback_query.message.edit_text(
            text='–°—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω. '
            f'–û—Ç–∑—ã–≤ –ø–æ —Ç–µ–º–µ <b>{rr.video.task.theme.title}</b> —É–∂–µ –ø–æ–ª—É—á–µ–Ω.',
            parse_mode='HTML',
            reply_markup=None,
        )
        return

    rr.due_date += timedelta(hours=1)
    rr.save()

    await callback_query.message.edit_text(
        text=f'–°—Ä–æ–∫ —Å–¥–≤–∏–Ω—É—Ç –¥–æ {rr.due_date}',
        reply_markup=None,
    )

    await send_message_admins(
        bot=callback_query.bot,
        text=f'''<b>–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π –ø—Ä–æ–¥–ª–∏–ª —Å—Ä–æ–∫</b>
–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: {rr.reviewer.comment.split(maxsplit=1)[0]}
–ö—É—Ä—Å: {rr.video.task.theme.course.title}
–¢–µ–º–∞: {rr.video.task.theme.title}
–°—Ä–æ–∫: {rr.due_date}'''
    )


@error_handler()
async def send_notify_reviewers(bot: Bot):
    '''–ü–æ—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–º—É –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∞'''

    for rr in get_reviewe_requests_by_notify():
        await bot.send_message(
            chat_id=rr.reviewer.tg_id,
            text='–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å. '
            '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π, —á—Ç–æ –±—ã –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –Ω–∞ 1 —á–∞—Å',
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text='–ü—Ä–æ–¥–ª–∏—Ç—å',
                        callback_data=f'rr_to_extend_{rr.id}',
                    )
                ]]
            )
        )


@error_handler()
async def loop(bot: Bot):
    now = datetime.now()
    if now.minute == 0:
        await send_notify_reviewers(bot)
        await check_old_reviewer_requests(bot)

